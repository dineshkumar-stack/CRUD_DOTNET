
@{
	ViewData["Title"] = "EditorNew";
}

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link href="~/ckeditor5/src/styles.css" rel="stylesheet" />
</head>

<body data-editor="DecoupledEditor" data-collaboration="false" data-revision-history="false">
	<div class="centered">
		<div class="row">
			<p class="col-5"> 
				<input id="save" class="btn btn-dark btn-sm" type="submit"  value="Download HTML">
				<input id="get-data"  class="btn btn-dark btn-sm" type="submit" onclick="saveContent()" value="Save">

				<a class="btn btn-outline-dark text-decoration-none btn-sm" asp-area="" asp-controller="Company" asp-action="">Back</a>
			</p>
@* <p class="col-7">@Html.Raw(Model.created_at)</p>*@	

<div class="document-editor__toolbar"></div>
		</div>
		<div class="container">
			<div class="row row-editor">
				<div id ="newEditor" class="editor">
					@Html.Raw(Model.content)
				</div>


				<div class="tabs-wrapper">
					<div class="tabs">
						<button class="tabs__item active" data-target="sidebar">Comments</button>
						<button class="tabs__item" data-target="archive">Comments Archive</button>
					</div>
					<div class="sidebar active" id="sidebar"></div>
					<div class="sidebar sidebar--archive" id="archive">
						<div class="comments-archive">
							<div class="comments-archive__list"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<script src="https://cdn.ckbox.io/CKBox/2.2.0/ckbox.js"></script>
	<script src="~/ckeditor5/build/ckeditor.js"></script>
	<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

	<script src="~/ckeditor5/src/script.js"></script>
	<script>
		function saveContent() {
			var updatedContent = {
				id: @Model.id,
				content: document.getElementById('newEditor').innerHTML
			};
			console.log("updatedContent", updatedContent);

			API = `https://localhost:7087/api/Ckeditor/PutContentbyId/${updatedContent.id}`
			console.log("API", API);

			fetch(API, {
				method: 'PUT',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(updatedContent)
			})
				.then(response => {
					if (!response.ok) {
						throw new Error('Network response was not ok');
					}
					return response.json();
				})
				.then(data => {
					console.log('Content successfully:', data);
					alert("Document Saved")
				})
				.catch(error => {
					console.error('Error updating content:', error);
				});
		}
		
	</script>

</body>
</html>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
